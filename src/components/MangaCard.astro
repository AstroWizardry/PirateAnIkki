---
import MangaCardInteractive from './MangaCardInteractive';

export interface Props {
  id: string;
  title: string;
  coverImage: string;
  author: string;
  status: 'ongoing' | 'completed' | 'hiatus';
  rating: number;
  chapters: number;
  genres: string[];
  description: string;
  isNSFW?: boolean;
}

const { 
  id, 
  title, 
  coverImage, 
  author, 
  status, 
  rating, 
  chapters, 
  genres, 
  description, 
  isNSFW = false 
} = Astro.props;

const getStatusColor = (status: string) => {
  switch (status) {
    case 'ongoing':
      return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400';
    case 'completed':
      return 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400';
    case 'hiatus':
      return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400';
    default:
      return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400';
  }
};


---

<MangaCardInteractive client:load id={id} title={title} isNSFW={isNSFW}>
  <!-- Cover Image -->
  <div class="relative aspect-[3/4] overflow-hidden">
    <img
      src={coverImage}
      alt={title}
      class="w-full h-full object-cover"
    />
    
    <!-- Status Badge -->
    <div class="absolute top-2 left-2">
      <span class={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(status)}`}>
        {status.charAt(0).toUpperCase() + status.slice(1)}
      </span>
    </div>
    
    <!-- NSFW Badge -->
    {isNSFW && (
      <div class="absolute top-2 right-2">
        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400">
          ðŸ˜ˆ NSFW
        </span>
      </div>
    )}
    
    <!-- Rating Badge -->
    <div class={`absolute ${isNSFW ? 'top-10' : 'top-2'} right-2`}>
      <div class="bg-black bg-opacity-75 text-white px-2 py-1 rounded-full text-xs font-medium flex items-center space-x-1">
        <span>{rating.toFixed(1)}</span>
        <svg class="w-3 h-3 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
          <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
        </svg>
      </div>
    </div>
  </div>

  <!-- Content -->
  <div class="p-3 sm:p-4">
    <!-- Title -->
    <h3 class="text-sm sm:text-base font-semibold text-gray-900 dark:text-white mb-1 line-clamp-2">
      {title}
    </h3>

    <!-- Author -->
    <p class="text-xs sm:text-sm text-gray-600 dark:text-gray-400 mb-2">
      by {author}
    </p>

    <!-- Rating -->
    <div class="flex items-center mb-2">
      <div class="flex space-x-0.5">
        {Array.from({ length: 5 }, (_, i) => (
          <svg class={`w-3 h-3 sm:w-4 sm:h-4 ${i < Math.floor(rating) ? 'text-yellow-400' : 'text-gray-300 dark:text-gray-600'}`} fill="currentColor" viewBox="0 0 20 20">
            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
          </svg>
        ))}
      </div>
      <span class="ml-1 text-xs text-gray-500 dark:text-gray-400">
        ({rating.toFixed(1)})
      </span>
    </div>

    <!-- Chapters -->
    <p class="text-xs sm:text-sm text-gray-600 dark:text-gray-400 mb-2">
      {chapters} chapters
    </p>

    <!-- Genres -->
    <div class="flex flex-wrap gap-1">
      {genres.slice(0, 3).map((genre) => (
        <span class="inline-block px-2 py-1 text-xs bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-full">
          {genre}
        </span>
      ))}
      {genres.length > 3 && (
        <span class="inline-block px-2 py-1 text-xs bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-full">
          +{genres.length - 3}
        </span>
      )}
    </div>

    <!-- Description -->
    <p class="text-xs text-gray-500 dark:text-gray-400 mt-2 line-clamp-2">
      {description}
    </p>
  </div>
</MangaCardInteractive> 